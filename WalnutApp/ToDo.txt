CURRENT SESSION:

- MOSTLY DONE - Look at waypoint editing. Create issue page...

- get nav/edit waypoint functioning without bugs!

- start looking at flight profile structure




PRIORITY:

- BUG - g_vectorPOS isn't actually tracking the element number....needs to be related to any iterator OR at least understand the math!!!!!!

- Take all calculations out of the render loop.

- WIP - cycle reduction - Reduce the number of unnecessary cycles through the loop if nothing is changing


TO DO:

- Need a proper architecture that builds and calculates the data in the vector regardless of scenarios, since right now it is hacked together to
read the structure and do the calcs. I'd like to see a more controlled, robust and responsive data block that doesn't waste cycles but still responds to change.

- ImGui::BeginCombo() for North, South, East and West!!

- implementation of Tables to layout data and screen elements

- Understand app structure: Element Value Editing vs Vector Structure Modification vs GUI display/input actions. The vector 
structure is a separate thing from what you see - those are EDITS! pop_back bug caused because vector structure being edited while screen is 
trying access data at a moved location in memory. (and iterators not valid?)

- Loop throught vector.begin() and vector.end() instead of incrementing waypointCounter++

- Add pre-planned waypoints, both for debugging ease, and as future feature for maps features - airbases, etc.

- look at how to deal with strings just to assure best practices. I have a char* for the units... printf-type function doesn't take a string :shock:

- Variables are scattered EVERYWHERE.....come up with a plan.

- WalnutApp.cpp needs a serious re-write.....stuff is everywhere

- WIP - Immprove -- North(1), South(-1), East(1), West(-1) so that "-1" affects the haversine output properly.
	This is overly complex due to the inability to attribute specific values to "ImGui::Combo" drop down. 
	Can this be re-written? YES: use BeginCombo()

- WIP - Look at type-conversion issues with int, float and/or double throughout the code

- Can I create a saved decimal degree Lat/Long in the vector for easy re-use?

- How to deal with limit cases for 'antipodes?'

- Can ImGui be updated to the latest version without breaking Walnut? (NOTE: not without a serious hassle. Tried to add the ImGui remote repo and it didn't end well.)

- Scratchpad for copy/pasting waypoint data as an interim to actual input from DCS

- Use more sophisticated formatting, perhaps Tables, Tabs, etc.

- Relate Editor map to real coords? CONVERSION Metric (x,y) to LAT/LONT will require ---> xxxxxx deg LAT = 1.0 meters and xxxxxx deg LONG = 1.0 meters
	need the converted LAT/LONG of each map Bullseye/Origin and then the x and y inside the .miz file for each waypoint.


FEATURES:

- File handling to Save and Load prior work.

- Add Alternate Landing/Refuel waypoints and calculations.


WISH LIST:

- Is it possible to draw outputs on an integral map?

- >>>> Flight and Fuel profiles needed for multiple aircraft.

- Climb and Decel ramps added to legs; Leg subprofiles and graphics?

- How to generate Mission Planner/Kneeboard info?

- Make dropdown list of Maps, and attached Origin LAT/LONG in decimal degrees would probably be best.

- Get app to communicate with DCS to avoid manual waypoint inputs.

- Allow user to pull up a data window for the aircraft. "View Data"

- How could the aircraft configuration code be made generic so that external data could fit all scenarios? 
	IE ... if I want to plug in another aircraft I don't have to create dedicated code?


CLEARED:
- DONE - Make a scrollable middle pane that allows the top and the bottom of the screen to still be viewed.

- DONE - (Converted InputText to strings) - if I want to save a Name string, look at the char[] vs std::string issue and possible callback resize issue. Also
look at GP Calc to figure out how I stored strings in vectors.***[ PROBLEM IS CHARS CAN'T BE STORED IN VECTOR ... not copyable/assignable ]***

- DONE - Sequential (0, 1, 2 ...) versus Named (2, 1, 3 ... alpha, gamma, beta (etc) ) waypoints for flexibility in the stack
	for route planning. That is to say, the route may not be flown sequentially.
	
- DONE - Add 'Insert' and 'Delete' 'Move Up, Move Down' waypoint options

-DONE -  BUG - Recalc bug - when moving the waypoint to new order, the prior distance calc goes with it, requiring PROPER recalc. AND...WPT 1 gains a distance,
instead of being ZERO as the first wpt. Not really Lambdas fault, but in footer aren't adding the recalculated distance and fuel properly due to recalc bug AND the fact that WPT 0 should NEVER have distance and fuel
calcs stored in the vector. When it moves, the fields are now now non-zero. >> Was stopping recalc flag too early.

- DONE - Waypoints need to be name-able with a string so when we move them in the sequence we can still ID them

- DONE - FIXED: - BUG - Deleting last waypoint causes a crash due to draw after delete in loop.

- DONE - FIXED: BUG - edited values like to bypass the recalc. Why? NOTES: When running calc after b_valueChanged we are passing ONLY specific vector pos, 
	not recalculating entire vector. So, we need a way to trigger calc not only after value change, but vector structure change. This is NOT the same 
	as the moveWaypoint bug, which causes similar issue.

- DONE - BUG FIX NS/EW bug by adding b_valueChanged trigger

- DONE - ISSUE 001 - BUG FIX, fuel use was changing when distance unit prefs changed. 
		Now fuel use stays same for same distance, converted or not.

- BUG - SQUASHED -  Moved where b_valueChanged was shut off, allowing the loop to do all recalcs. DrawMain created in class to house the loop and logic.
	(new clamp/recalc structure is not recalculating ALL entries. Extends all the way down into test-1 BRANCH - this is the perfect place to fix it.)

- DONE - Stop vector emplace_back race condition in which action occurred EACH while-loop. Vector kept growing!

- DONE - Output not showing due to too close to window edge - [NOTE: Haversine function loop check "testmarker" is 
		showing odd behaviour and not incrementing through the loop as expected. Did I fix this already???] - NO, not fixed!

- DONE - we pass 'a' into drawEntry in MathFunctions.h in a pretty lazy fashion. Name the vars better!!! 
		[Decided to use vector position naming so that I can hash-label the waypoint IDs later to move and edit the matrix]

- DONE - write a wrapper for the InputFloat( ) that clamps the value and calls haversine on changes, (Clamp) waypoint input to limit latitude to +-90 and longitude to +- 180 degrees

- DONE - trigger that calls haversine etc only on changes

- DONE - add char* for unit descriptions. fix unit display on Leg Length - will need a char or string var to draw there.

- DONE - Menu structure.

- DONE - move Debug into its own function

